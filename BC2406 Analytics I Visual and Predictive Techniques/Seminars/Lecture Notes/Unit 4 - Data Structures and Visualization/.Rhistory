mean(total_deposit)
mean(total_investment)
set.seed(200)
deposit = 0
investment = 0
total_deposit = 0
total_investment = 0
contribution = 1000
for (n in 1:100){
return = runif(5,-0.03,0.07)
for (i in 1:5){
if (return[i] > 0){dividend = (investment[i] + contribution)*(return[i]) }
else{dividend = 0}
deposit[i+1] =  deposit[i]+dividend
investment[i+1] = ((investment[i] + contribution)*(1+return[i]))-dividend
}
total_deposit[n] = deposit[6]
total_investment[n]= investment[6]
}
mean(total_deposit)
mean(total_investment)
set.seed(200)
deposit = 0
investment = 0
total_deposit = 0
total_investment = 0
contribution = 1000
for (n in 1:100){
return = runif(5,-0.03,0.07)
for (i in 1:5){
if (return[i] > 0){dividend = (investment[i] + contribution)*(return[i]) }
else{dividend = 0}
deposit[i+1] =  deposit[i]+dividend
investment[i+1] = ((investment[i] + contribution)*(1+return[i]))-dividend
}
total_deposit[n] = deposit[6]
total_investment[n]= investment[6]
}
mean(total_deposit)
mean(total_investment)
set.seed(200)
for (i in 1:1000){
hrsold = runif(10,3,5)
if (sum(hrsold)<0){leftover =0 }
else{leftover[i] = 50-sum(hrsold)}
}
mean(leftover)
set.seed(200)
leftover = 0
for (i in 1:1000){
hrsold = runif(10,3,5)
if (sum(hrsold)<0){leftover =0 }
else{leftover[i] = 50-sum(hrsold)}
}
mean(leftover)
?rnorm
set.seed(200)
leftover = 0
for (i in 1:1000){
hrsold = rnorm(10,4.5,1.5)
if (sum(hrsold)<0){understock[i] =0 }
else{leftover[i] = 50-sum(hrsold)}
}
(leftover)
length(understock)
set.seed(200)
leftover = 0
understock = 0
for (i in 1:1000){
hrsold = rnorm(10,4.5,1.5)
if (sum(hrsold)<0){understock[i] =0 }
else{leftover[i] = 50-sum(hrsold)}
}
(leftover)
length(understock)
set.seed(200)
leftover = 0
for (i in 1:100){
hrsold = rnorm(10,4.5,1.5)
if (sum(hrsold)<0){leftover[i] =0 }
else{leftover[i] = 50-sum(hrsold)}
}
length(leftover)
set.seed(200)
leftover = 0
for (i in 1:100){
hrsold = rnorm(10,4.5,1.5)
if (sum(hrsold)<0){leftover[i] = leftover[i]+ 1 }
}
leftover
set.seed(200)
leftover = 0
for (i in 1:100){
hrsold = rnorm(10,4.5,1.5)
if (sum(hrsold)>50){leftover[i] = leftover[i]+ 1 }xax
}
set.seed(200)
leftover = 0
for (i in 1:100){
hrsold = rnorm(10,4.5,1.5)
if (sum(hrsold)>50){leftover[i] = leftover[i]+ 1 }
qt(−1.9406,7)
qt(−1.9406,7)
qt(−1.9406,7)
qt(−1.9406,7)
qt(−1.9406,7)
qt(-1.9406,7)
pt(-1.9406,7)
View(ceosal1)
View(data = ceosal1)
View(ceosal1)
library(wooldridge)
View(ceosal1)
salary_indus = ceosal1$salary[ceosal1$indus == 1 ]
mean(salary_indus)
?nrow()
nrow(ceosal1)
ncol(ceosal1)
for (i in 1:1000){
set.seed(10*i)
ss = runif(1,50,100)
dd = rnorm(1,70,10)
diff[i] = ss-dd
}
mean(diff)
hist(diff)
diff = 0
for (i in 1:1000){
set.seed(10*i)
ss = runif(1,50,100)
dd = rnorm(1,70,10)
diff[i] = ss-dd
}
mean(diff)
hist(diff)
x = 0
for (i in 1:1000){
x[i]= mean(sample(c(1,2,3,4,5,6),1,prob = seq((1/6,6)),replace =T)
}
mean (x)
x = rep(0,1000)
for (i in 1:1000){
x[i]= mean(sample(c(1,2,3,4,5,6),1,prob = seq((1/6,6)),replace =T)
}
mean (x)
prob
seq(1,1/6)
seq(1/6,6)
x = rep(0,1000)
for (i in 1:1000){
x[i]= mean(sample(c(1,2,3,4,5,6),1,prob = rep((1/6,6)),replace =T)
}
mean (x)
x = rep(0,1000)
for (i in 1:1000){
x[i]= mean(sample(c(1,2,3,4,5,6), 1, prob = rep((1/6,6)), replace =T)}
mean (x)
x = rep(0,1000)
for (i in 1:1000){
x[i]= mean(sample(c(1,2,3,4,5,6), 1, prob = rep((1/6,6)), replace =T)}
mean(x)
x = rep(0,100000)
set.seed(100)
for (i in 1:100000){
x[i]= mean(sample(c(1,2,3,4,5,6), 1, prob = rep((1/6,6)), replace =T))}
mean(x)
x = rep(0,100000)
set.seed(100)
for (i in 1:100000){
x[i]= mean(sample(c(1,2,3,4,5,6), 1, prob = rep((1/6,6)), replace =T))}
mean(x)
x = rep(0,100000)
set.seed(100)
for (i in 1:100000){
x[i]= mean(sample(c(1,2,3,4,5,6), 1, prob = (c(1/6,1/6,1/6,1/6,1/6,1/6)), replace =T))}
mean(x)
x = rep(0,100000)
set.seed(1000)
for (i in 1:100000){
x[i]= mean(sample(c(1,2,3,4,5,6), 1, prob = (c(1/6,1/6,1/6,1/6,1/6,1/6)), replace =T))}
mean(x)
qnorm(-1.96,01)
qnorm(-1.96,0,1)
pnorm(-1.96,0,1)
library(wooldridge)
View(ceosal1)
View(ceosal1)
View(ceosal1)
ceosal1$salary[ceosal1$indus ==1]
View(ceosal1)
x = ceosal1$salary[ceosal1$indus ==1]
mean(x)
read.csv(file.choose(), Header = T)
read.csv(file.choose(), header = T)
x=read.csv(file.choose(), Header = T)
x=read.csv(file.choose(), header = T)
x = read.csv(file.choose(), header = T)
x$probabilites =  x$frequencies/200
#p(x=4,y=0)
sum(x$probabilites[x$x==4 and x$y ==0])
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group = x)
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
print(margin_x)
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
prob = (sum(x$probabilites[x$y==0]))/y
prob
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
prob = (sum(x$probabilites[x$y==0 and x$y==4]))/y
prob
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
prob = (sum(x$probabilites[x$y==0 & x$y==4]))/y
prob
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
prob = (x$probabilites[x$y==0 & x$y==4])/y
prob
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
prob = (x$probabilites[x$y==0 & x$y==4])/sum(x$probabilites[x$x==4])
prob
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
P04=(x$probabilities[x$y==0 & x$x==4])/sum(x$probabilities[x$x==4])
P04
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
P04=(x$probabilities[x$y==0 & x$x==4])/sum(x$probabilities[x$x==4])
print(P04)
View (x)
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
P04=(x$probabilites[x$y==0 & x$x==4])/sum(x$probabilites[x$x==4])
print(P04)
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
P04=sum(x$probabilites[x$y==0 & x$x==4])/sum(x$probabilites[x$x==4])
print(P04)
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
P04=(x$probabilites[x$y==0 & x$x==4])/sum(x$probabilites[x$x==4])
print(P04)
#p(x=4,y=0)
sum(x$probabilites[x$x==4 & x$y ==0])
margin_x = rowsum(x$probabilites, group =x$x)
#prob of x = 4
y = sum(x$probabilites[x$x==4])
#P(Y=0|x=4)
P04=(x$probabilites[x$y==0 & x$x==4])/sum(x$probabilites[x$x==4])
print(P04)
t = (20.2-24)/(7.5/sqrt(35))
pvalue = pt(t,35)
pvalue
t = (20.2-24)/(7.5/sqrt(35))
pvalue = pt(t,34)
pvalue
t = (20.2-24)/(7.5/sqrt(35))
pvalue = pt(t,36)
pvalue
floor(2.5)
floor(3.5)
qt(0.2625,34)
-0.6422782*(7.5/sqrt(35))
20,2-24
20.2-24
ceiling(52/5)
ceiling(5/4)
ceiling(3/2)
4^3
64/7
125/7
125-(17*7)
D^4
5^4
625/7
625-(89*7)
5^5
3125/7
446*7
5^6/7
5^6-(2232*7)
1024/6
170*6
17*6
170*6
5^4
625/7
87*7
89*7
x <- 5
y <- 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 3")
}
if ((x|y)>=10){
print("Either x or y is greater than 10")
}
x <- 5
y <- 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 3")
}
if ((x|y)>=10){
print("Either x or y is greater than 10")
}
x <- 5
y <- 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 10")
}
if ((x|y)>=10){
print("Either x or y is greater than 10")
x <- 5
y <- 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 10")
}
if ((x|y)>=10){
print("Either x or y is greater than 10")
}
x <- 5
y <- 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 10")
}
if ((x|y)>=10){
print("Either x or y is greater than 10")
}
x <- 5
y <- 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 10")
}
if ((x|y)>=10){
print("Either x or y is greater than 10")
}
x <- 5
y <- 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 10")
}
if ((x|y)>=5){
print("Either x or y is greater than 10")
}
x = 5
y = 10
if ( (x&y) >= 10) {
print("Both x and y are greater than 10")
}
if ((x|y)>=5){
print("Either x or y is greater than 10")
}
x = 5
y = 10
if ( y>x) {
print("Both x and y are greater than 10")
}
x = 5
y = 10
if ((x&y)>5) {
print("Both x and y are greater than 10")
}
if ((x|y)>=5){
print("Either x or y is greater than 10")
}
x <- 5
y <- 10
if ((x&y)>5) {
print("Both x and y are greater than 10")
}
if ((x|y)>=5){
print("Either x or y is greater than 10")
}
x <- 5
y <- 10
if ((x&y)>5) {
print("Both x and y are greater than 10")
}
# Store numbers 1 to 10 in x as a vector
x <- c(1:10)
# OR function
# Show which numbers in x that are more than 8 or less than 5
x[(x>8) | (x<5)]
# gives you 1 2 3 4 9 10
# AND function
x[(x>5) & (x<9)]
# which will give you 6 7 8
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
library(data
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
lawsuit.dt$Gender = factor(lawsuit.dt$Gender)
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt.Gender = factor(lawsuit.dt$Gender)
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt.Gender = factor(lawsuit.dt$Gender)
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt.Gender = factor(lawsuit.dt$Gender)
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt.Gender = factor(lawsuit.dt$Gender)
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df < - fread("states_ins_sub_dt.csv")
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df <- fread("states_ins_sub_dt.csv")
lawsuit.dt.Gender = factor(lawsuit.dt$Gender)
class(lawsuit.dt)
clas(lawsuit.dt$Cert)
class(lawsuit.dt$Cert)
lawsuit.dt$Cert = factor(lawsuit.dt$Cert)
class(lawsuit.dt$Cert)
setwd("~/Desktop/Y2S1/BC2406/Unit 4 - Data Structures and Visualization")
library(data.table)
lawsuit.dt <- fread("Lawsuit.csv")
states.df <- fread("states_ins_sub_dt.csv")
lawsuit.dt$Gender = factor(lawsuit.dt$Gender)
lawsuit.dt$Clin = factor(lawsuit.dt$Clin)
lawsuit.dt$Cert = factor(lawsuit.dt$Cert)
lawsuit.dt$Rank = factor(lawsuit.dt$Rank)
View(states.df)

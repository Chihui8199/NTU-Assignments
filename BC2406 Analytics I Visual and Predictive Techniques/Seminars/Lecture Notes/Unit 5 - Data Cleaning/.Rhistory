# ========================================================================================================
# Purpose:      Rscript for Data Cleaning demo
# Author:       Neumann Chew
# DOC:          10-09-2017
# Topics:       Data Cleaning; Data Preparation.
# Packages:     data.table
# Data Sources:
#  1. Derived Sample from USA Census PUMS Data for Health Insurance Coverage. Already Used in wk 3.
#=========================================================================================================
#=========================================================================================================
#========================================================================================================
#
# Part 1: RQ1 - RQ4
#
#=========================================================================================================
#=========================================================================================================
setwd("~/Desktop/BC2406/Unit 5 - Data Cleaning")
library(data.table)
custdata.dt <- fread('health_ins_cust.csv')
# Get summary statistics of all columns in dataset.
# Quick way to see range, categories and missing values.
summary(custdata.dt)
# Value = Missing may be self-employed, students, retirees, not in active workforce,...
# Create a new column employment. Temporary recode NA as missing in employment column.
custdata.dt[is.na(is.employed), employment:='missing']
custdata.dt[is.employed == T, employment:='employed']
custdata.dt[is.employed == F, employment:='unemployed']
custdata.dt$employment <- factor(custdata.dt$employment, levels = c('unemployed', 'employed', 'missing'))
# summary check on new column
summary(custdata.dt$employment)
# RQ1: ---------------------------------------------------------------------------------------------------
# In the above code, we created a new column "employment" to hold the recoded missing values.
# Why can't we overwrite NA to 'missing' in the is.employed column so that we don't need to create column?
#---------------------------------------------------------------------------------------------------------
#ANS: IS employed is a logical column that contains true and false.
#The NA values could be overwritten and cleaned incorrectly which leads to wrongly recorded data
# RQ2: -----------------------------------------------------------------
# Verify that the employment column was correctly created as intended.
#-----------------------------------------------------------------------
# To verify if the columns exists
names(custdata.dt)
#we can also create a comparism table
custdata.dt[,"employment",]
custdata.dt[,"employment",]
custdata.dt[,c("employment","is.employed", "Boolean" := boolean),]
library(datasets)
options(device='windows')
#par can be used to set or query graphical parameters.
#Parameters can be set by specifying them as arguments to par in tag = value form, or by passing them as a list of tagged value
par(mfrow = c(2,2))
boxplot(age ~ is.employed, data = custdata.dt, xlab = "is.employed", ylab = "Age")
boxplot(income ~ is.employed, data = custdata.dt, xlab = "is.employed", ylab = "Income")
boxplot(age ~ employment, data = custdata.dt, xlab = "Employment", ylab = "Age")
boxplot(income ~ employment, data = custdata.dt, xlab = "Employment", ylab = "Income")
par(mfrow = c(1,1))
# Examine then clean negative income --------------------------------------------------------------
custdata.dt[income < 0, .N]
## Only 1 case of negative income.
custdata.dt[income < 0]
## custid = 971703, unemployed, aged 60, with Health Insurance, married, have 3 cars, income = -$8700.
# Would positive $8700 be a more accurate value than negative $8700? i.e. a typo error.
# Check actual paper records and if not avail, to find more statistical evidence.
# Examine the distribution of income among the unemployed and find the rank of $8700 income
?ecdf
subgroup1 <- custdata.dt[is.employed==F & marital.stat == 'Married' & age > 50]
summary(subgroup1$income)
percentile <- ecdf(subgroup1$income)
percentile(8700)
## 0.26. $8700 would be the 26th percentile income among the unemployed, married, and age >50.
## More confident, though not 100% certain, that -$8700 can be replaced by $8700.
# RQ3: ---------------------------------------------------------------------------------------------------
# In the above code, we created a subgroup1 based on 3 criteria.
# Why didn't we use more criteria that would be closer to custid 971703 profile?
# e.g. to also include num.of.vehicles, state.of.res, housing.type,...
#---------------------------------------------------------------------------------------------------------
# RQ4: ------------------------------------------------------------------------------------------
# Instead of subjectively choosing the criterias for subgroup1, is there a more objective method?
#------------------------------------------------------------------------------------------------
# Replace wrong value with estimated value.
custdata.dt[income == -8700, income:= 8700]
summary(custdata.dt$income)
## Min income is no longer -8700
#=========================================================================================================
#========================================================================================================
#
# Part 2: RQ5 - RQ7
#
#=========================================================================================================
#=========================================================================================================
# Examine then clean Zero income ------------------------------------------
custdata.dt[income==0, .N]
## 78 cases of zero income. Employed?
# Question: How many of such cases are children vs retirees? Based on age bracket.
zeroincome = custdata.dt[income==0, .N, by = .(employment, age<18, age>65)]
setnames(zeroincome, "age", "age<18")
setnames(zeroincome, "age.1", "age>65")
zeroincome
# RQ5: ------------------------------------------------------------------------------------------
# Based on the results above, how would you clean the zero income?
# In terms of both the value to be replaced and the execution [overwrite?].
#------------------------------------------------------------------------------------------------
# 1. Create a new column called income_fix,by duplicating the column in the original data table
#we learn not to overwrite data in the earlier part of this exercise
custdata.dt[,income_fix:=income]
# Replace the missing values of income with NA
custdata.dt[income == 0 & employment=="missing", income_fix:=0]
#To check if you have correctly  replaces those with income = 0 and employment as missing to 0
custdata.dt[income_fix==0, .N, by = .(employment, age<18, age>65)]
#Replace those values that is labelled as NA with mean value of income
meanincome <-mean(custdata.dt[,as.numeric(income),])
custdata.dt[(is.na(income_fix) == TRUE), income_fix:=meanincome]
# RQ6: ---------------------------------------------------------------------------------------------------------
# Create an income bracket variable based on the cutoffs $0, 5000, 20000, 50000, 100000, 200000, 500000, 1000000
#---------------------------------------------------------------------------------------------------------------
# RQ7: -------------------------------------------------------------------------
# Clean the age variable. Explain your decision in your comments.
#-------------------------------------------------------------------------------
# End of Rscript =====================================================================
custdata.dt[]
# ========================================================================================================
# Purpose:      Rscript for Data Cleaning demo
# Author:       Neumann Chew
# DOC:          10-09-2017
# Topics:       Data Cleaning; Data Preparation.
# Packages:     data.table
# Data Sources:
#  1. Derived Sample from USA Census PUMS Data for Health Insurance Coverage. Already Used in wk 3.
#=========================================================================================================
#=========================================================================================================
#========================================================================================================
#
# Part 1: RQ1 - RQ4
#
#=========================================================================================================
#=========================================================================================================
library(data.table)
setwd("C:/Users/Megan/Desktop/NERD TIME/Y2S1/BC2406 - Analytics 1/Unit 3 - Data Exploration/Unit 3 - Data Exploration")
custdata.dt <- fread("health_ins_cust.csv")
?is.na()
# Get summary statistics of all columns in dataset.
# Quick way to see range, categories and missing values.
summary(custdata.dt)
# Value = Missing may be self-employed, students, retirees, not in active workforce,...
# Create a new column employment. Temporary recode NA as missing in employment column.
custdata.dt[is.na(is.employed), employment:='missing']
#if employed is missing, generate employment and assign Text missing
custdata.dt[is.employed == T, employment:='employed']
#if employed is missing, generate employment and assign employed
custdata.dt[is.employed == F, employment:='unemployed']
#if employed is missing, generate employment and assign Text unemployed
class(custdata.dt$employment)
custdata.dt$employment <- factor(custdata.dt$employment, levels = c('unemployed', 'employed', 'missing'))
#there are 3 values
custdata.dt.isemployed<-custdata.dt[is.na(is.employed)]
custdata.dt.employed<-custdata.dt[employment=="missing"]
identical(custdata.dt.isemployed,custdata.dt.employed)
custdata.dt$employment.mode()
# summary check on new column
summary(custdata.dt$employment)
# RQ1: ---------------------------------------------------------------------------------------------------
# In the above code, we created a new column "employment" to hold the recoded missing values.
# Why can't we overwrite NA to 'missing' in the is.employed column so that we don't need to create column?
# IS employed is a logical column that contains true and false. The NA values could be overwritten and cleaned incorrectly which leads to wrongly recorded data
class(custdata.dt$is.employed)
#cannot assign text missing into the original column.
# RQ2: -----------------------------------------------------------------
# Verify that the employment column was correctly created as intended.
#-----------------------------------------------------------------------
?par()
#one represents the number of rows and the second represents the number of plots
#par(mfrow)-number of rows and number of columns
library(datasets)
#options(device='windows') <- This doesn't work for me :(
options(device = "RStudioGD")
par(mfrow = c(2,2))
par(mar=c(4,3,3,4))
boxplot(age ~ is.employed, data = custdata.dt, xlab = "is.employed", ylab = "Age")
boxplot(income ~ is.employed, data = custdata.dt, xlab = "is.employed", ylab = "Income")
boxplot(age ~ employment, data = custdata.dt, xlab = "Employment", ylab = "Age")
boxplot(income ~ employment, data = custdata.dt, xlab = "Employment", ylab = "Income")
par(mfrow = c(1,1))
# Examine then clean negative income --------------------------------------------------------------
custdata.dt[income < 0, .N]
## Only 1 case of negative income.
custdata.dt[income < 0]
## custid = 971703, unemployed, aged 60, with Health Insurance, married, have 3 cars, income = -$8700.
# Would positive $8700 be a more accurate value than negative $8700? i.e. a typo error.
# Check actual paper records and if not avail, to find more statistical evidence.
?ecdf()
# Examine the distribution of income among the unemployed and find the rank of $8700 income
subgroup1 <- custdata.dt[is.employed==F & marital.stat == 'Married' & age > 50]
summary(subgroup1$income)
percentile <- ecdf(subgroup1$income)
plot(percentile)
percentile(8700)
## 0.26. $8700 would be the 26th percentile income among the unemployed, married, and age >50.
## More confident, though not 100% certain, that -$8700 can be replaced by $8700.
# RQ3: ---------------------------------------------------------------------------------------------------
# In the above code, we created a subgroup1 based on 3 criteria.
# Why didn't we use more criteria that would be closer to custid 971703 profile?
# e.g. to also include num.of.vehicles, state.of.res, housing.type,...
#want to know how likely income of $8700 falls under married female employees above 50. This has more relevance to income as compared to housing type etc.
#too specific and sample size will be small.
#This is entirely subjective, as to how we choosethe factors to analyse
# RQ4: ------------------------------------------------------------------------------------------
# Instead of subjectively choosing the criterias for subgroup1, is there a more objective method?
#use linear regression model, model income by using other available information.
#After getting linear regression result, identify which variable is significantly related to income. choose the 3 criteria to generate the subgroup.
#Calculate correlation using the cor() function/ R square where R square is just the square of the correlation
# Replace wrong value with estimated value.
custdata.dt[income == -8700, income:= 8700]
summary(custdata.dt$income)
## Min income is no longer -8700
#=========================================================================================================
#========================================================================================================
#
# Part 2: RQ5 - RQ7
#
#=========================================================================================================
#=========================================================================================================
# Examine then clean Zero income ------------------------------------------
custdata.dt[income==0, .N]
## 78 cases of zero income. Employed?
# Question: How many of such cases are children vs retirees? Based on age bracket.
#To make dataviewing clearer
zeroincome = custdata.dt[income==0, .N, by = .(employment, age<18, age>65)]
setnames(zeroincome, "age", "age<18")
setnames(zeroincome, "age.1", "age>65")
zeroincome
# RQ5: ------------------------------------------------------------------------------------------
# Based on the results above, how would you clean the zero income?
#1. create a new column income fix
custdata.dt[,income.fix:=income]
custdata.dt[income==0&employment=="missing",income.fix:=NA]
#replace missing values of income with NA
mean(custdata.dt$income)
class(custdata.dt$income.fix)
custdata.dt$income.fix<-as.numeric(custdata.dt$income.fix)
custdata.dt[is.na(income.fix)==1,income.fix:=53522.17]
custdata.dt[]
#replace third row unemployed with missing.
# In terms of both the value to be replaced and the execution [overwrite?].
#------------------------------------------------------------------------------------------------
# RQ6: ---------------------------------------------------------------------------------------------------------
# Create an income bracket variable based on the cutoffs $0, 5000, 20000, 50000, 100000, 200000, 500000, 1000000
#---------------------------------------------------------------------------------------------------------------
custdata.dt$income <- factor(custdata.dt$income, levels = c(0,5000,20000,50000,100000,200000,500000,1000000))
#generate a discretize - use the function cut
?cut
cut.off<-c(0,5000,20000,50000,100000,200000,500000,1000000)
as.numeric(custdata.dt$income.fix)
custdata.dt[,income.bracket1:=cut(income.fix,breaks=cut.off,include.lowest = T)]
custdata.dt[,income.bracket2:=cut(income.fix,breaks=cut.off,include.lowest = F)]
summary(custdata.dt$income.bracket2)
summary(custdata.dt$income.bracket1)
summary(custdata.dt$income.fix)
# RQ7: -------------------------------------------------------------------------
# Clean the age variable. Explain your decision in your comments.
#-------------------------------------------------------------------------------
custdata.dt[age > 100, .N]
custdata.dt[age > 100]
#how to come up with a dataset that is suitable for cleaning??
# End of Rscript =====================================================================
custdata.dt[]
meanincome <-mean(custdata.dt[,as.numeric(income),])
meanincome
# ========================================================================================================
# Purpose:      Rscript for Data Cleaning demo
# Author:       Neumann Chew
# DOC:          10-09-2017
# Topics:       Data Cleaning; Data Preparation.
# Packages:     data.table
# Data Sources:
#  1. Derived Sample from USA Census PUMS Data for Health Insurance Coverage. Already Used in wk 3.
#=========================================================================================================
#=========================================================================================================
#========================================================================================================
#
# Part 1: RQ1 - RQ4
#
#=========================================================================================================
#=========================================================================================================
setwd("~/Desktop/BC2406/Unit 5 - Data Cleaning")
library(data.table)
custdata.dt <- fread('health_ins_cust.csv')
# Get summary statistics of all columns in dataset.
# Quick way to see range, categories and missing values.
summary(custdata.dt)
# Value = Missing may be self-employed, students, retirees, not in active workforce,...
# Create a new column employment. Temporary recode NA as missing in employment column.
custdata.dt[is.na(is.employed), employment:='missing']
custdata.dt[is.employed == T, employment:='employed']
custdata.dt[is.employed == F, employment:='unemployed']
custdata.dt$employment <- factor(custdata.dt$employment, levels = c('unemployed', 'employed', 'missing'))
# summary check on new column
summary(custdata.dt$employment)
# RQ1: ---------------------------------------------------------------------------------------------------
# In the above code, we created a new column "employment" to hold the recoded missing values.
# Why can't we overwrite NA to 'missing' in the is.employed column so that we don't need to create column?
#---------------------------------------------------------------------------------------------------------
#ANS: IS employed is a logical column that contains true and false.
#The NA values could be overwritten and cleaned incorrectly which leads to wrongly recorded data
# RQ2: -----------------------------------------------------------------
# Verify that the employment column was correctly created as intended.
#-----------------------------------------------------------------------
# To verify if the columns exists
names(custdata.dt)
#we can also create a comparism table
custdata.dt[,"employment",]
custdata.dt[,"employment",]
custdata.dt[,c("employment","is.employed", "Boolean" := boolean),]
library(datasets)
options(device='windows')
#par can be used to set or query graphical parameters.
#Parameters can be set by specifying them as arguments to par in tag = value form, or by passing them as a list of tagged value
par(mfrow = c(2,2))
boxplot(age ~ is.employed, data = custdata.dt, xlab = "is.employed", ylab = "Age")
boxplot(income ~ is.employed, data = custdata.dt, xlab = "is.employed", ylab = "Income")
boxplot(age ~ employment, data = custdata.dt, xlab = "Employment", ylab = "Age")
boxplot(income ~ employment, data = custdata.dt, xlab = "Employment", ylab = "Income")
par(mfrow = c(1,1))
# Examine then clean negative income --------------------------------------------------------------
custdata.dt[income < 0, .N]
## Only 1 case of negative income.
custdata.dt[income < 0]
## custid = 971703, unemployed, aged 60, with Health Insurance, married, have 3 cars, income = -$8700.
# Would positive $8700 be a more accurate value than negative $8700? i.e. a typo error.
# Check actual paper records and if not avail, to find more statistical evidence.
# Examine the distribution of income among the unemployed and find the rank of $8700 income
?ecdf
subgroup1 <- custdata.dt[is.employed==F & marital.stat == 'Married' & age > 50]
summary(subgroup1$income)
percentile <- ecdf(subgroup1$income)
percentile(8700)
## 0.26. $8700 would be the 26th percentile income among the unemployed, married, and age >50.
## More confident, though not 100% certain, that -$8700 can be replaced by $8700.
# RQ3: ---------------------------------------------------------------------------------------------------
# In the above code, we created a subgroup1 based on 3 criteria.
# Why didn't we use more criteria that would be closer to custid 971703 profile?
# e.g. to also include num.of.vehicles, state.of.res, housing.type,...
#---------------------------------------------------------------------------------------------------------
# RQ4: ------------------------------------------------------------------------------------------
# Instead of subjectively choosing the criterias for subgroup1, is there a more objective method?
#------------------------------------------------------------------------------------------------
# Replace wrong value with estimated value.
custdata.dt[income == -8700, income:= 8700]
summary(custdata.dt$income)
## Min income is no longer -8700
#=========================================================================================================
#========================================================================================================
#
# Part 2: RQ5 - RQ7
#
#=========================================================================================================
#=========================================================================================================
# Examine then clean Zero income ------------------------------------------
custdata.dt[income==0, .N]
## 78 cases of zero income. Employed?
# Question: How many of such cases are children vs retirees? Based on age bracket.
zeroincome = custdata.dt[income==0, .N, by = .(employment, age<18, age>65)]
setnames(zeroincome, "age", "age<18")
setnames(zeroincome, "age.1", "age>65")
zeroincome
# RQ5: ------------------------------------------------------------------------------------------
# Based on the results above, how would you clean the zero income?
# In terms of both the value to be replaced and the execution [overwrite?].
#------------------------------------------------------------------------------------------------
# 1. Create a new column called income_fix,by duplicating the column in the original data table
#we learn not to overwrite data in the earlier part of this exercise
custdata.dt[,income_fix:=income]
# Replace the missing values of income with NA
custdata.dt[income == 0 & employment=="missing", income_fix:=0]
#To check if you have correctly  replaces those with income = 0 and employment as missing to 0
custdata.dt[income_fix==0, .N, by = .(employment, age<18, age>65)]
#Replace those values that is labelled as NA with mean value of income
meanincome <-mean(custdata.dt[,as.numeric(income),])
custdata.dt[(is.na(income_fix) == TRUE), income_fix:= meanincome]
# RQ6: ---------------------------------------------------------------------------------------------------------
# Create an income bracket variable based on the cutoffs $0, 5000, 20000, 50000, 100000, 200000, 500000, 1000000
#---------------------------------------------------------------------------------------------------------------
# RQ7: -------------------------------------------------------------------------
# Clean the age variable. Explain your decision in your comments.
#-------------------------------------------------------------------------------
# End of Rscript =====================================================================
meanincome <-mean(custdata.dt[,as.numeric(income),])
meanincome
custdata.dt[(is.na(income_fix) == TRUE), income_fix:= meanincome]
custdata.dt[]
custdata.dt[,income_fix:=income]
# Replace the missing values of income with NA
custdata.dt[income == 0 & employment=="missing", income_fix:=NA]
#To check if you have correctly  replaces those with income = 0 and employment as missing to 0
custdata.dt[income_fix==0, .N, by = .(employment, age<18, age>65)]
#Replace those values that is labelled as NA with mean value of income
meanincome <-mean(custdata.dt[,as.numeric(income),])
custdata.dt[(is.na(income_fix) == TRUE), income_fix:= meanincome]
custdata.dt[]
custdata.dt[(is.na(income_fix) == TRUE), income_fix:= meanincome]
custdata.dt[(is.na(income_fix) == TRUE), as.double(income_fix):= meanincome]
custdata.dt(is.double(income_fix),)
custdata.dt[is.double(income_fix),]
custdata.dt[(is.na(income_fix) == TRUE), income_fix:= meanincome]
custdata.dt[]
custdata.dt[as.double(income_fix),]
custdata.dt[(is.na(income_fix) == TRUE), income_fix:= meanincome]
custdata.dt[]
income_braket <- c(0, 5000, 20000, 50000, 100000, 200000, 500000, 1000000)
class(custdata.dt$is.employed)
summary(subgroup1$income)
count(subgroup1)
#If age has only 1 character or more than 2 characters, code as NA.
custdata.dt[,age_fix := age]
custdata.dt[nchar(age_fix) == 1|nchar(age_fix)>2,age_fix := NA]
#verify
custdata.dt0[is.na(age_fix), .N, by =.(age<10, age>99)]
#If age has only 1 character or more than 2 characters, code as NA.
custdata.dt[,age_fix := age]
custdata.dt[nchar(age_fix) == 1|nchar(age_fix)>2,age_fix := NA]
#verify
custdata.dt[is.na(age_fix), .N, by =.(age<10, age>99)]
#If age has only 1 character or more than 2 characters, code as NA.
custdata.dt[,age_fix := age]
custdata.dt[nchar(age_fix) == 1|nchar(age_fix)>2,age_fix:= NA]
#verify
custdata.dt[is.na(age_fix), .N, by =.(age<10, age>99)]
library(data.table)
setwd("~/Desktop/Y2S1/BC2406/Unit 5 - Data Cleaning")
library(data.table)
setwd("~/Desktop/Y2S1/BC2406/Unit 5 - Data Cleaning")
children.dt <- fread('children.csv')
custdata.dt <- fread(health_ins_cust.csv)
library(data.table)
setwd("~/Desktop/Y2S1/BC2406/Unit 5 - Data Cleaning")
custdata.dt <- fread('health_ins_cust.csv')
#=========================================================================================================
library(data.table)
setwd("~/Desktop/Y2S1/BC2406/Unit 5 - Data Cleaning")
children.dt <- fread('children.csv')
children.dt
sum(is.na(children.dt))    ## only 1 NA in dataset
which(is.na(children.dt))  ## That one NA is in row 6 [i.e. value coded: NA]
children2.dt <- fread('children.csv', na.strings = c("NA", "missing", "N/A", -99, "", "m", "M", "na", "."))
children2.dt  ## All the 9 ways to code missing value are now recoded as NA.
custdata.dt <- fread('health_ins_cust.csv')
# ========================================================================================================
# Purpose:      Rscript for Data Cleaning demo
# Author:       Neumann Chew
# DOC:          10-09-2017
# Topics:       Data Cleaning; Data Preparation.
# Packages:     data.table
# Data Sources:
#  1. Example dataset "children.csv"
#  2. Derived Sample from USA Census PUMS Data for Health Insurance Coverage. Already used in wk 3.
#=========================================================================================================
library(data.table)
setwd("~/Desktop/Y2S1/BC2406/Unit 5 - Data Cleaning")
children.dt <- fread('children.csv')
children.dt
sum(is.na(children.dt))    ## only 1 NA in dataset
which(is.na(children.dt))  ## That one NA is in row 6 [i.e. value coded: NA]
## Source data has 9 different codes for missing value but only one code is auto-recognized by R.
# Use na.strings to define all human codes for missing values to be NA.
children2.dt <- fread('children.csv', na.strings = c("NA", "missing", "N/A", -99, "", "m", "M", "na", "."))
children2.dt  ## All the 9 ways to code missing value are now recoded as NA.
sum(is.na(children2.dt))    ## 9 NAs in dataset
#which(is.na(children2.dt))
which(is.na(children2.dt$children))  # where are the NAs in children column.
which(is.na(children2.dt$Room))      # where are the NAs in Room column.
custdata.dt <- fread('health_ins_cust.csv')
# Get summary statistics of all columns in dataset.
# Quick way to see range, categories and missing values.
summary(custdata.dt)
# Value = Missing may be self-employed, students, retirees, not in active workforce,...
# Create a new column employment. Temporary recode NA as missing in employment column.
custdata.dt[is.na(is.employed), employment:='missing']
custdata.dt[is.employed == T, employment:='employed']
custdata.dt[is.employed == F, employment:='unemployed']
custdata.dt$employment <- factor(custdata.dt$employment, levels = c('unemployed', 'employed', 'missing'))
# summary check on new column
summary(custdata.dt$employment)
table(custdata.dt$employment, custdata.dt$is.employed, useNA = 'ifany', deparse.level = 2)
custdata.dt[, .N, by = .(is.employed, employment)]
# Examine then clean negative income --------------------------------------------------------------
custdata.dt[income < 0, .N]
custdata.dt[income < 0]
subgroup1 <- custdata.dt[is.employed==F & marital.stat == 'Married' & age > 50]
summary(subgroup1$income)  # 19 cases
subgroup1 <- custdata.dt[is.employed==F & marital.stat == 'Married' & age > 50, .N]
subgroup1
custdata.dt[, income.fix := income]  # create a copy of income column.
custdata.dt[, income.fix := income]  # create a copy of income column.
View(children.dt)
View(children.dt)
View(custdata.dt)
View(custdata.dt)

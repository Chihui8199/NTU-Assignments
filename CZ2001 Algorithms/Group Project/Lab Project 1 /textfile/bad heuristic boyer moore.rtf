{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red0\green0\blue0;\red155\green35\blue147;\red57\green0\blue160;\red28\green0\blue207;\red15\green104\blue160;
\red93\green108\blue121;\red108\green54\blue169;\red50\green109\blue116;}
{\*\expandedcolortbl;;\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c5882\c40784\c62745;
\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c19418\c42935\c45455;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 #include \cf4 <iostream>\cf5 \
\cf2 #include \cf4 <cstring>\cf5 \
\cf2 #include \cf4 <fstream>\cf5 \

\f1\b \cf6 using
\f0\b0 \cf5  
\f1\b \cf6 namespace
\f0\b0 \cf5  \cf7 std\cf5 ;\
\cf2 # define NUM_OF_CHARS \cf8 256\cf5 \
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf9 badCharHeuristic\cf5 (\cf7 string\cf5  str, 
\f1\b \cf6 int
\f0\b0 \cf5  size,\
                        
\f1\b \cf6 int
\f0\b0 \cf5  badChar[\cf2 NUM_OF_CHARS\cf5 ])\
\{\
    \cf10 /*str = pat\cf5 \
\cf10      size = patSize*/\cf5 \
    \
    \cf10 /* badChar is the character of txt which doesnt match with current character of pat*/\cf5 \
    \
    
\f1\b \cf6 int
\f0\b0 \cf5  i;\
    \cf10 /*initialise all values of badChar to be -1*/\cf5 \
    
\f1\b \cf6 for
\f0\b0 \cf5  (i = \cf8 0\cf5 ; i < \cf2 NUM_OF_CHARS\cf5 ; i++)\
        badChar[i] = -\cf8 1\cf5 ;\
  \
    \cf10 /* actual last occurance of a character in pat */\cf5 \
    
\f1\b \cf6 for
\f0\b0 \cf5  (i = \cf8 0\cf5 ; i < size; i++)\
        badChar[
\f1\b \cf6 int
\f0\b0 \cf5 (str[i])] = i;\
        \
\}\
  \
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf9 search\cf5 (\cf7 string\cf5  txt, \cf7 string\cf5  pat)\
\{\
    
\f1\b \cf6 int
\f0\b0 \cf5  patSize = 
\f1\b \cf6 int
\f0\b0 \cf5 (pat.\cf11 size\cf5 ());\
    
\f1\b \cf6 int
\f0\b0 \cf5  txtSize = 
\f1\b \cf6 int
\f0\b0 \cf5 (txt.\cf11 size\cf5 ());\
  \
    
\f1\b \cf6 int
\f0\b0 \cf5  badChar[\cf2 NUM_OF_CHARS\cf5 ];\
  \
\
    \cf12 badCharHeuristic\cf5 (pat, patSize, badChar);\
  \
    
\f1\b \cf6 int
\f0\b0 \cf5  shift = \cf8 0\cf5 ;\
    
\f1\b \cf6 while
\f0\b0 \cf5 (shift <= (txtSize - patSize))\
    \{\
        
\f1\b \cf6 int
\f0\b0 \cf5  j = patSize-\cf8 1\cf5 ;\
  \
        \cf10 /* match pat and txt, and reduces j */\cf5 \
        
\f1\b \cf6 while
\f0\b0 \cf5 (j >= \cf8 0\cf5  && pat[j] == txt[shift + j])\
            j--;\
  \
        \cf10 /* if it's a match at current shift then j = -1 */\cf5 \
        
\f1\b \cf6 if
\f0\b0 \cf5  (j < \cf8 0\cf5 )\
        \{\
            \cf11 cout\cf5  << \cf4 "Pattern occurs at shift/position: "\cf5  <<  shift+\cf8 5\cf5  << \cf11 endl\cf5 ;\
  \
            \cf10 /* pat shifts to align with next character of txt\cf5 \
\cf10             (io+m < i) is incasr pat is at end of txt */\cf5 \
            shift += (shift + patSize < txtSize)? patSize-badChar[txt[shift + patSize]] : \cf8 1\cf5 ;\
  \
        \}\
  \
        
\f1\b \cf6 else
\f0\b0 \cf5 \
            \cf10 /* shift pat so badChar of txt aligns with last occurance of character in pat\cf5 \
\cf10              max: positive shift in case last occurance of character in pat is at right side\cf5 \
\cf10              of current character (in txt) */\cf5 \
            shift += \cf11 max\cf5 (\cf8 1\cf5 , j - badChar[txt[shift + j]]);\
    \}\
\}\
  \

\f1\b \cf6 int
\f0\b0 \cf5  \cf9 main\cf5 ()\
\{\
    \cf7 string\cf5  txt, pat, line, data;\
    \cf7 fstream\cf5  inFile(\cf4 "/Users/russellleung/Desktop/virus.fna"\cf5 , \cf7 fstream\cf5 ::\cf11 in\cf5 );\
    inFile.\cf11 good\cf5 ();\
    
\f1\b \cf6 if
\f0\b0 \cf5  (!inFile)\
    \{\
        \cf11 cout\cf5 <<\cf4 "Unable to open file!"\cf5 ;\
        \cf11 exit\cf5 (\cf8 1\cf5 );\
    \}\
    
\f1\b \cf6 while
\f0\b0 \cf5 (!inFile.\cf11 eof\cf5 ())\
    \{\
        inFile>>data;\
        txt = txt + data;\
    \}\
    \cf10 /*cout<<"Enter Text: ";\cf5 \
\cf10     cin>>txt;*/\cf5 \
    \cf11 cout\cf5 <<\cf11 endl\cf5 ;\
    \cf11 cout\cf5 <<\cf4 "Enter Pattern: "\cf5 ;\
    \cf11 cin\cf5 >>pat;\
    \cf11 cout\cf5 <<\cf11 endl\cf5 ;\
    \cf12 search\cf5 (txt, pat);\
    inFile.\cf11 close\cf5 ();\
    
\f1\b \cf6 return
\f0\b0 \cf5  \cf8 0\cf5 ;\
\}\
\
}